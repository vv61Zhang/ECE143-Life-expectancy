# -*- coding: utf-8 -*-
"""
Created on Sat Dec 1

@author: Wei Zhang


This module's purpose is

"""
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import os


def find_bigfeatures(tmp, len=4):
    '''To find the top len countries 
    who has a biggest change 
    tmp: csv input
    len: number of countries '''
    tmp_columns = list(tmp.columns)
    tmp_values = []
    features = []
    for col in tmp_columns:
        tmp_values.append(abs(tmp.iloc[0][col]))
    tmp_values.sort(reverse = True)
    target = tmp_values[len]
    for col in tmp_columns:
        if abs(tmp.iloc[0][col]) > target:
            features.append(col)
    return features

pd.set_option('display.max_columns', None)   #to show one whole column 

filename = "modified.csv"       

df = pd.read_csv(filename)
df_2015 = pd.DataFrame(columns=df.columns) # to save datas of 2015
df_2000 = pd.DataFrame(columns=df.columns)#to save datas of 2000

for i in range(0, len(df)):
    if df.iloc[i]['Year'] == 2015:
        df_2015.loc[df_2015.shape[0]+1] = df.iloc[i]
    elif df.iloc[i]['Year'] == 2000:
        df_2000.loc[df_2000.shape[0]+1] = df.iloc[i]
# df_2015 = df_2015.set_index('Country',inplace=True, drop=True)    # set 'country' as index
df_2015.drop(['Year', 'Status', 'Unnamed: 0','Measles ','Alcohol','infant deaths','Polio','Diphtheria ',' thinness  1-19 years','percentage expenditure','Hepatitis B',' BMI '], axis=1, inplace=True)  # remove useless columns
df_2015.set_index('Country', inplace=True, drop=True)               # set 'country 'as index
df_2000.drop(['Year', 'Status', 'Unnamed: 0','Measles ','Alcohol','infant deaths','Polio','Diphtheria ',' thinness  1-19 years','percentage expenditure','Hepatitis B',' BMI '], axis=1, inplace=True)   
df_2000.set_index('Country', inplace=True, drop=True)
df_dif15 = (df_2015-df_2000)/df_2000                 #  changing rate of features of all countries from 2000 to 2015

df_Pos = df_dif15.sort_values(by = 'Life expectancy ', ascending=False) # descendingly re-order df_dif15
# print(df_Pos)

df_Pos = df_Pos[0:10]     # choose top 10 countries of life expectancy changing rate
draw = (df_Pos-df_dif15.mean())/df_dif15.mean()             
draw.drop(['Life expectancy ', ], axis=1, inplace=True)   
draw.plot(kind='bar')

features = []                 # to save features with biggest changing rate in top10 countries
for i in range(0, len(draw)):
    features.append(find_bigfeatures(draw[i:i+1]))
print(features)
feas = list(df_2015.columns)
mostImportantFeature = []  # features appear most in the list'features'
for fea in feas:
    count = 0;
    for i in range(0, len(features)):
        if fea in features[i]:
            count += 1

    if count > 5:          # features that more than five countries make a big change of 
        mostImportantFeature.append(fea)

print('Here are the most important features:')
print(mostImportantFeature)
plt.show()



'''draw plot1
boxplot:changing rates from all countries
red jitter:represents only top10 contries
'''
import seaborn as sns
plt.style.use('ggplot')
plot_data=df_dif15
plot2_data=df_Pos.copy()
plot2_data.drop(['Life expectancy '], axis=1, inplace=True)
plt.figure(figsize = (22,10))
ax= sns.boxplot(data=plot_data)
ax = sns.swarmplot(data=plot2_data, color="red")
plt.ylim(-1,5)
plt.xlabel('Features')
plt.ylabel('Changing Rate')
plt.title('Changing Rates of Features')
'''draw plot2
'''
name_list = df_Pos.index.tolist()
num_list = df_Pos['Life expectancy ']
plt.barh(range(len(num_list)), num_list,tick_label = name_list)
plt.xlabel('Life Expectancy Changing Rate')
plt.ylabel('TOP 10 Countries')
plt.show()


'''draw plot3 
'''
import random
name_list = feas
Country10=df_Pos.index.tolist()
num_list=[]
last_num_list=[0]*len(feas)
plt.figure(figsize = (22,10))
colorlist  = ['red','green','blue','orange','black','m','yellow','tomato','aqua','tan','crimson'] #多写几种颜色
randomlist = random.sample(colorlist, 10)  #从colorlist中随机取十种
for k in range(len(features)):
    sub_num_list=[]
    for i in range(len(feas)):
        count=0
        for j in features[k]:
            if j==feas[i]:
                count=count+1
        if count==0:
            sub_num_list.append(0)
        else:
            sub_num_list.append(1)
    num_list.append(sub_num_list)

    plt.bar(range(len(sub_num_list)), sub_num_list, bottom=last_num_list, label=Country10[k],color = randomlist[k], tick_label=name_list  )
    last_num_list =np.sum([last_num_list,sub_num_list],axis=0)

plt.xticks(fontsize=12, rotation=90)
plt.legend()
plt.show()
